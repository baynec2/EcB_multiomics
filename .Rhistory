library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
library(purrr)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE,cache = TRUE)
#Setting ggplot2 theme, this isn't working for some reason
theme_set(
ggprism::theme_prism()+
theme(plot.title = element_text(hjust = 0.5))
)
#Setting ggplot2 theme, this one works
#theme_set(
# theme_classic()+
#theme(plot.title = element_text(hjust = 0.5))
#)
## Reading in the normalized data ##
normalized_data = read_csv("01_r_processed_data/normalized_metabolomics.csv")
gnps_annotations = read_csv("00_r_input_data/gnps_annotations.csv")
topn = read_csv("01_r_processed_data/top10_faecalis_v_faecium_metabolomics_biomarkers.csv") %>% pull(row_id)
ROC_data = dplyr::filter(normalized_data,row_id %in% topn) %>%
dplyr::arrange(factor(row_id,topn)) %>%
inner_join(gnps_annotations,by = c("row_id" = "row_id"))
s5c = make_violin_plot_metabolomics(ROC_data,topn)
View(ROC_data)
source("functions.R")
s5c = make_violin_plot_metabolomics(ROC_data,topn)
View(ROC_data)
View(gnps_annotations)
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
library(purrr)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE,cache = TRUE)
#Setting ggplot2 theme, this isn't working for some reason
theme_set(
ggprism::theme_prism()+
theme(plot.title = element_text(hjust = 0.5))
)
#Setting ggplot2 theme, this one works
#theme_set(
# theme_classic()+
#theme(plot.title = element_text(hjust = 0.5))
#)
#Loading in mapping data that will allow us to go from Uniprot ID to gene ID.
# Will use this to fix the labels.
# Next time make sure to have fragpipe give gene level data instead of by uniprot id.
protein_to_gene = readr::read_csv("00_r_input_data/protein_id_to_gene.csv")
### Figure 1b ###
# Reading in the cleaned clinical metadata to start to make plots
clinical_metadata = readr::read_csv("00_r_input_data/clinical_metadata.csv")
p0 = clinical_metadata %>%
ggplot(aes(condition,fill = condition))+
geom_histogram(stat = "count")+
scale_fill_viridis_d()+
ggtitle("Condition")+
ggprism::theme_prism(base_size = 6)
p0
# Defining the columns that we want to show patient charachteristics for
columns_to_look_at = c("gender", "charleson_index", "bacteremia_duration","gender","day_of_blood_draw","sensitive_to_vancomycin","condition","death_during_admission")
# Filtering the data to the relevant columns
sel = clinical_metadata %>%
select(sample_id,columns_to_look_at,pathogen) %>%
filter(!is.na(pathogen))
# Plotting Gender by Pathogen
p1 = sel %>%
ggplot(aes(gender,fill = pathogen))+
geom_histogram(stat = "count")+
scale_fill_viridis_d(end = 0.5)+
ggtitle("Gender") +
ggprism::theme_prism(base_size = 6)
#Plotting Charleson index by Pathogen
p2 = sel %>%
ggplot(aes(charleson_index,fill = pathogen))+
geom_histogram(stat = "count")+
scale_fill_viridis_d(end = 0.5)+
ggtitle("Charleson Index")+
ggprism::theme_prism(base_size = 6)
# Bacteremia Durration
p3 = sel %>%
ggplot(aes(bacteremia_duration,fill = pathogen))+
geom_histogram(stat = "count")+
scale_fill_viridis_d(end = 0.5)+
ggtitle("Bacteremia Duration")+
ggprism::theme_prism(base_size = 6)
# Day of Blood Draw
p4 = sel %>%
ggplot(aes(day_of_blood_draw,fill = pathogen))+
geom_histogram(stat = "count")+
scale_fill_viridis_d(end = 0.5)+
ggtitle("Day of Blood Draw")+
ggprism::theme_prism(base_size = 6)
# Sensitivity to Vancomycin
p5 = sel %>%
ggplot(aes(sensitive_to_vancomycin,fill = pathogen))+
geom_histogram(stat = "count")+
scale_fill_viridis_d(end = 0.5)+
ggtitle("Vancomycin Sensitivity")+
ggprism::theme_prism(base_size = 6)
# Sensitivity to Vancomycin
p6 = sel %>%
ggplot(aes(death_during_admission,fill = pathogen))+
geom_histogram(stat = "count")+
scale_fill_viridis_d(end = 0.5)+
ggtitle("Death During Admission")+
ggprism::theme_prism(base_size = 6)
f1b = ggpubr::ggarrange(p1,p2,p3,p4,p5,p6,common.legend = TRUE,legend = "none",ncol = 6,font.label = list(size = 14))
f1b
ggsave("02_figures/f1_overview_of_study/f1b.pdf",plot = f1b, height = 2.5, width = 8.268,units = "in")
### Figure 1C ###
#Loading in mapping file
mapping = readxl::read_excel("../proteomics/sample_mapping.xlsx")
#Loading in data
data = read_delim("00_r_input_data/abundance_gene_MD.tsv")
#Converting to long format
long = data %>%
pivot_longer(6:length(.),names_to = "sample_name")
#Combining data and mapping
all = inner_join(mapping,long,by="sample_name")
#Loading in mapping file
mapping = readxl::read_excel("00_r_input_data/proteomics_sample_mapping.xlsx")
# Loading in the clinical metadata
cmd = read_csv("00_r_input_data/clinical_metadata.csv") %>%
select(-condition)
mapping = inner_join(mapping,cmd,by = c("sample_name" = "sample_id"))
#Loading in data
data = read_delim("00_r_input_data/abundance_gene_MD.tsv")
#Converting to long format
long = data %>%
pivot_longer(6:length(.),names_to = "sample_name")
#Combining data and mapping
all = inner_join(mapping,long,by="sample_name")
#Converting into a matrix
mat = all %>%
dplyr::select(-ProteinID,-NumberPSM,-ReferenceIntensity,-MaxPepProb) %>%
pivot_wider(values_from = value,names_from = Index)
#Extracting only the data
dat = mat %>%
dplyr::select(81:length(.)) %>%
dplyr::select_if(~ !any(is.na(.)))
#Extracting only the metadata
md = mat %>%
dplyr::select(1:81)
#setting row names so we can look at the labels if need be
rownames(dat) <- paste0(md$sample_name)
# Calculating distances
d = dist(dat)
# Showing as a dendrogram
dend = as.dendrogram(hclust(d,method = "ward.D2"))
library(circlize)
library(dendextend)
# adding color by the type of infection
colors_to_use = viridis::viridis(3)[as.numeric(as.factor(md$condition))]
# getting everything in the correct order
colors_to_use = colors_to_use[order.dendrogram(dend)]
# adding mortality
colors_to_use_2 = c("#000000","#FF0000")[as.numeric(as.factor(md$death_during_admission))]
colors_to_use_2 = colors_to_use_2[order.dendrogram(dend)]
# adding color to the dendrogram branches
dend = branches_color(dend,col = colors_to_use) %>%
set("branches_lwd", 8)
labels_colors(dend) = colors_to_use_2
pdf("02_figures/f1_overview_of_study/f1c.pdf")
circlize_dendrogram(dend,
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
dev.off()
circlize_dendrogram(dend,
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
### Figure 1C ###
#Loading in mapping file
mapping = readxl::read_excel("00_r_input_data/proteomics_sample_mapping.xlsx")
# Loading in the clinical metadata
cmd = read_csv("00_r_input_data/clinical_metadata.csv") %>%
select(-condition)
mapping = inner_join(mapping,cmd,by = c("sample_name" = "sample_id"))
#Loading in data
data = read_delim("00_r_input_data/abundance_gene_MD.tsv")
#Converting to long format
long = data %>%
pivot_longer(6:length(.),names_to = "sample_name")
#Combining data and mapping
all = inner_join(mapping,long,by="sample_name")
#Converting into a matrix
mat = all %>%
dplyr::select(-ProteinID,-NumberPSM,-ReferenceIntensity,-MaxPepProb) %>%
pivot_wider(values_from = value,names_from = Index)
#Extracting only the data
dat = mat %>%
dplyr::select(81:length(.)) %>%
dplyr::select_if(~ !any(is.na(.)))
#Extracting only the metadata
md = mat %>%
dplyr::select(1:81)
#setting row names so we can look at the labels if need be
rownames(dat) <- paste0(md$sample_name)
# Calculating distances
d = dist(dat)
# Showing as a dendrogram
dend = as.dendrogram(hclust(d,method = "ward.D2"))
library(circlize)
library(dendextend)
# adding color by the type of infection
colors_to_use = viridis::viridis(3)[as.numeric(as.factor(md$condition))]
# getting everything in the correct order
colors_to_use = colors_to_use[order.dendrogram(dend)]
# adding mortality
colors_to_use_2 = c("#000000","#FF0000")[as.numeric(as.factor(md$death_during_admission))]
colors_to_use_2 = colors_to_use_2[order.dendrogram(dend)]
# adding color to the dendrogram branches
dend = branches_color(dend,col = colors_to_use) %>%
set("branches_lwd", 8)
labels_colors(dend) = colors_to_use_2
#this is in circular form
pdf("02_figures/f1_overview_of_study/f1c.pdf")
circlize_dendrogram(dend,
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
dev.off()
circlize_dendrogram(dend,
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
circlize_dendrogram(dend %>% color_branches(k = 2),
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
### Figure 1 D ###
## Reading in data ##
normalized_data = read_csv("01_r_processed_data/normalized_metabolomics.csv")
##Why do we have different numbers of healthy?
test = normalized_data %>%
select(sample_id,condition) %>%
distinct() %>%
group_by(condition) %>%
summarise(n = n())
## Transforming the data ##
norm_wide = normalized_data %>%
select(-row_m_z,-row_retention_time,-value) %>%
tidyr::pivot_wider(names_from = row_id,values_from = norm_value)
norm_dat = norm_wide %>%
dplyr::select(78:length(.))
norm_md = norm_wide %>%
dplyr::select(1:77)
rownames(norm_md) = norm_md$sample_id
## Plotting the overal clustering ##
rownames(norm_dat) = norm_md$sample_id
d = dist(norm_dat)
dend = as.dendrogram(hclust(d, "ward.D2"))
#dend = as.dendrogram(hclust(d))
library(circlize)
library(dendextend)
# let's add some color:
colors_to_use = viridis::viridis(3)[as.numeric(as.factor(norm_md$condition))]
#getting in the same order as dendrogram
colors_to_use = colors_to_use[order.dendrogram(dend)]
# adding mortality
colors_to_use_2 = c("#000000","#FF0000")[as.numeric(as.factor(norm_md$death_during_admission))]
colors_to_use_2 = colors_to_use_2[order.dendrogram(dend)]
# Now we can color the brancehes
dend = branches_color(dend,col = colors_to_use,) %>%
set("branches_lwd", 8)
labels_colors(dend) = colors_to_use_2
pdf("02_figures/f1_overview_of_study/f1d.pdf")
circlize_dendrogram(dend,
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
dev.off()
circlize_dendrogram(dend,
labels_track_height = NA,
dend_track_height = 0.5,
labels = TRUE)
# Read MSstats.csv file.
data = read_csv("00_r_input_data/msstats.csv")
View(data)
# Read MSstats.csv file.
data = read_csv("00_r_input_data/msstats.csv")
#Note that the condition of the bridge channel needs to be labeled as Norm
annotation = read_csv("00_r_input_data/MSstatsTMT_annotation.csv")
mstats = MSstatsTMT::PhilosophertoMSstatsTMTFormat(input = data,annotation)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MSstatsTMT")
# Read MSstats.csv file.
data = read_csv("00_r_input_data/msstats.csv")
#Note that the condition of the bridge channel needs to be labeled as Norm
annotation = read_csv("00_r_input_data/MSstatsTMT_annotation.csv")
mstats = MSstatsTMT::PhilosophertoMSstatsTMTFormat(input = data,annotation)
View(annotation)
stats = MSstatsTMT::PhilosophertoMSstatsTMTFormat(input = data,annotation)
# use MSstats for protein summarization
quant.msstats = MSstatsTMT::proteinSummarization(stats,
method="msstats",
global_norm=TRUE,
reference_norm=TRUE,
remove_norm_channel = TRUE,
remove_empty_channel = TRUE)
# Taking the pl_data and formatting appropriately
pl_data = quant.msstats$ProteinLevelData %>%
tidyr::separate(Protein, c("orientation","uniprotid","locus"),sep ="\\|") %>%
# Converting to gene name
inner_join(protein_to_gene,by = c("uniprotid" = "ProteinID")) %>%
mutate(sample_id = paste0(Mixture,".",Channel))
write_csv(pl_data,"01_r_processed_data/quant_msstats_protein_level_data.csv")
write_csv(quant.msstats$FeatureLevelData,"01_r_processed_data/quant_msstats_feature_level_data.csv")
### Preforming the statistics ###
test.pairwise = MSstatsTMT::groupComparisonTMT(quant.msstats, moderated = TRUE)
## All groups ##
res = test.pairwise$ComparisonResult %>%
separate(Protein, c("orientation","uniprotid","locus"),sep ="\\|")
write_csv(res,"01_r_processed_data/groupComparison_results.csv")
## Faecalis v Healthy
faecalis_v_healthy = res %>%
filter(Label == "Faecalis vs Healthy")
write_csv(faecalis_v_healthy,"01_r_processed_data/faecalis_v_healthy.csv")
## Faecium v Healthy
healthy_v_faecium = res %>%
filter(Label == "Healthy vs Faecium")
write_csv(healthy_v_faecium,"01_r_processed_data/healthy_v_faecium.csv")
## Faecalis v Faecium ##
faecalis_v_faecium = res %>%
filter(Label == "Faecalis vs Faecium")
write_csv(faecalis_v_faecium,"01_r_processed_data/faecalis_v_faecium.csv")
