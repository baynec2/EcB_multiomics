# Return relevant outputs
out <- list(
model_summary = model_summary_out,
test_results = predictions,
model_summary_plot = p1,
confusion_matrix = confusion_matrix_out
)
return(out)
}
# Extracting the ROC curves from the output of our_model()
extract_roc = function(list,outcome,prediction_col){
# Convert the outcome variable to a factor
predictions <- list$test_results %>%
mutate(!!outcome := as.factor(!!sym(outcome)))
# Generate ROC curve data
roc_data <- roc_curve(predictions, !!sym(outcome), !!sym(prediction_col))
roc_auc <- roc_auc(predictions, !!sym(outcome), !!sym(prediction_col))
# Plot ROC curve
p1 <- autoplot(roc_data) +
ggtitle(paste0("AUC = ", round(roc_auc$.estimate, 2)))
return(p1)
}
#| label: generate-model-data
#| echo: false
#| include: true
model_data <- clinical_metadata_o %>%
merge(all_t, by = "sample_id")
View(model_data)
table(model_data$condition)
#| label: create-healthy-v-infected-model-recipe
#| echo: false
#| include: false
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
h_v_i_model_recipe <- recipe(infection_status ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(condition, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(infection_status, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
#| label: view ROC
h_v_i_res <- our_model(model_data,"infection_status",h_v_i_model_recipe)
extract_roc(h_v_i_res,"infection_status",".pred_infected")
#| label: view estimates
h_v_i_res$model_summary_plot
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
h_v_i_model_recipe2 <- recipe(infection_status ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(condition, new_role = "id") %>%
update_role(`RID_29112:bis(2-ethylhexyl) phthalate` , new_role = "id") %>%
update_role(`RID_22644:phthalic anhydride` , new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(infection_status, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
h_v_i_res2 <- our_model(model_data,"infection_status",h_v_i_model_recipe2)
extract_roc(h_v_i_res2,"infection_status",".pred_infected")
ggsave("healthy_vs_infected_ROC.pdf",width = 3,height = 3)
p2 = h_v_i_res2$model_summary_plot
p2
ggsave("healthy_vs_infected_estimates.pdf",p2, height = 3.5, width = 7 )
View(model_data)
names(model_data)
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
h_v_i_model_recipe2 <- recipe(infection_status ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(condition, new_role = "id") %>%
update_role(`RID_29112:bis(2-ethylhexyl) phthalate` , new_role = "id") %>%
update_role(`RID_21438:decynediol, tetramethyl, di(2-hydroxyethyl) ether` , new_role = "id") %>%
update_role(`RID_22644:phthalic anhydride` , new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(infection_status, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
h_v_i_res2 <- our_model(model_data,"infection_status",h_v_i_model_recipe2)
extract_roc(h_v_i_res2,"infection_status",".pred_infected")
ggsave("healthy_vs_infected_ROC.pdf",width = 3,height = 3)
p2 = h_v_i_res2$model_summary_plot
p2
ggsave("healthy_vs_infected_estimates.pdf",p2, height = 3.5, width = 7 )
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
h_v_i_model_recipe2 <- recipe(infection_status ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(condition, new_role = "id") %>%
update_role(`RID_29112:bis(2-ethylhexyl) phthalate` , new_role = "id") %>%
update_role(`RID_21438:decynediol, tetramethyl, di(2-hydroxyethyl) ether` , new_role = "id") %>%            update_role(`RID_10819:pentapropylene glycol` , new_role = "id") %>%
update_role(`RID_22644:phthalic anhydride` , new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(infection_status, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
h_v_i_res2 <- our_model(model_data,"infection_status",h_v_i_model_recipe2)
extract_roc(h_v_i_res2,"infection_status",".pred_infected")
ggsave("healthy_vs_infected_ROC.pdf",width = 3,height = 3)
p2 = h_v_i_res2$model_summary_plot
p2
ggsave("healthy_vs_infected_estimates.pdf",p2, height = 3.5, width = 7 )
#| label: faecalis v faecium model
# Have to discard the healthy data here
model_data <- clinical_metadata_o %>%
merge(all_t, by = "sample_id") %>%
dplyr::filter(condition != "healthy")
outcome = "infection_status"
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
faecalis_v_faecium_recipe <- recipe(condition ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(infection_status, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
faecalis_v_faecium_res <- our_model(model_data,"condition",faecalis_v_faecium_recipe)
table(model_data$condition)
#| label: faecalis v faecium model
# Have to discard the healthy data here
model_data <- clinical_metadata_o %>%
merge(all_t, by = "sample_id") %>%
dplyr::filter(condition != "healthy")
outcome = "infection_status"
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
faecalis_v_faecium_recipe <- recipe(condition ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(infection_status, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
faecalis_v_faecium_res <- our_model(model_data,"condition",faecalis_v_faecium_recipe)
#| label: model ROCs
p3 = extract_roc(faecalis_v_faecium_res,"condition",".pred_faecalis")
p3
ggsave("faecalis_v_faecium_ROC.pdf",p3, height= 3, width = 3)
#| label: model estimates
#|
p4 = faecalis_v_faecium_res$model_summary_plot
ggsave("faecalis_vs_faecium_estimates.pdf",p4, height = 3.5, width = 7 )
p4
model_data <- clinical_metadata %>%
filter(condition != "healthy") %>%
# antimicrobial testing was not perfomred for this patient
filter(sample_id != "S18") %>%
#getting rid of uninformative columns. Either very little variance, or too many levels to be useful
select(-pathogen,-patient_id,-pathogen_source,-infection_status,
-bacteremia_recurrence,-race,-death_at_one_year,
-peripheral_vascular_disease,-dementia,-hemiplegia,
-highly_active_antiretroviral_therapy,
-source) %>%
mutate(transplant_type = case_when(transplant_type == "none" ~ "none",
TRUE ~ "transplant")) %>%
select_if(~ !any(is.na(.))) %>%
select(-antibiotic_therapy_before_48_hrs,-antibiotic_therapy_after_48_hrs) %>%
mutate(across(c(history_of_myocardial_infarction,
congestive_heart_failure,
history_of_stroke_or_transient_ischemic_attack,
smoking, copd, peptic_ulcer_disaese,
mod_to_severe_chromic_kidney_disease,
hodgkin_disease, leukemia_or_lymphoma,
icu_admission, mechanical_ventilation,
polymicrobial_bacteremia,
thrombocytopenia_plt_50, hypotension,sensitive_to_vancomycin),
as.factor)) %>%
mutate(wbc = as.numeric(wbc))
faecalis_v_faecium_m_model_recipe <- recipe(condition ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "outcome") %>% # specify target
step_novel() %>%
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
condition_metadata_res = our_model(model_data,"condition",
faecalis_v_faecium_m_model_recipe)
p5 = extract_roc(condition_metadata_res,"condition",".pred_faecalis")
p5
ggsave("faecalis_vs_faecium_md_roc_1.pdf",p5, height = 3, width = 3)
p6 = condition_metadata_res$model_summary_plot
p6
ggsave("faecalis_vs_faecium_md_estimate_1.pdf",p6, height = 3.5, width = 5.5)
faecalis_v_faecium_m_model_recipe2 <- recipe(condition ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "outcome") %>%# specify target
update_role(pathogen_type,new_role = "id") %>%
update_role(sensitive_to_vancomycin,new_role = "id") %>%
update_role(amp_mic,new_role = "id") %>%
update_role(vanc_mic,new_role = "id") %>%
step_novel() %>%
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
condition_metadata_res2 = our_model(model_data,"condition",
faecalis_v_faecium_m_model_recipe2)
p7 = extract_roc(condition_metadata_res2,"condition",".pred_faecalis")
p7
ggsave("faecalis_vs_faecium_md_roc_2.pdf",p7, height = 3, width = 3)
p7 = extract_roc(condition_metadata_res2,"condition",".pred_faecium")
p7
faecalis_v_faecium_m_model_recipe2 <- recipe(condition ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "outcome") %>%# specify target
update_role(pathogen_type,new_role = "id") %>%
update_role(sensitive_to_vancomycin,new_role = "id") %>%
update_role(amp_mic,new_role = "id") %>%
update_role(vanc_mic,new_role = "id") %>%
step_novel() %>%
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
condition_metadata_res2 = our_model(model_data,"condition",
faecalis_v_faecium_m_model_recipe2)
p7 = extract_roc(condition_metadata_res2,"condition",".pred_faecium")
p7
ggsave("faecalis_vs_faecium_md_roc_2.pdf",p7, height = 3, width = 3)
p8 = condition_metadata_res2$model_summary_plot
p8
ggsave("faecalis_vs_faecium_md_estimate_2.pdf",p8, height = 3.5, width = 5)
p8 = condition_metadata_res2$model_summary_plot
p8
ggsave("faecalis_vs_faecium_md_estimate_2.pdf",p8, height = 3.5, width = 5)
faecalis_v_faecium_m_model_recipe3 <- recipe(condition ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "id") %>%
update_role(pathogen_type,new_role = "id") %>%
update_role(sensitive_to_vancomycin,new_role = "id") %>%
update_role(amp_mic,new_role = "id") %>%
update_role(vanc_mic,new_role = "id") %>%
update_role(transplant_type, new_role = "id")%>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "outcome") %>% # specify target
step_novel() %>%
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
condition_metadata_res3 = our_model(model_data,"condition",
faecalis_v_faecium_m_model_recipe3)
p9 = extract_roc(condition_metadata_res3,"condition",".pred_faecalis")
p9
ggsave("faecalis_vs_faecium_md_roc_3.pdf",p9, height = 3, width = 3)
p9 = extract_roc(condition_metadata_res3,"condition",".pred_faecium")
p9
p10 = condition_metadata_res3$model_summary_plot
p10
ggsave("faecalis_vs_faecium_md_estimate_3.pdf",p10, height = 3.5, width = 5)
# Have to discard the healthy data here
model_data <- clinical_metadata_o %>%
merge(all_t, by = "sample_id") %>%
dplyr::filter(condition != "healthy") %>%
dplyr::mutate(death_during_admission = as.factor(death_during_admission))
# Recipe does all of the feature engineering so that we don't have to do anything else to the input data
mortality_vs_survival_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(infection_status, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(condition, new_role = "id") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_normalize(all_numeric_predictors()) # normalize numeric features
mortality_vs_survival_res = our_model(model_data,"death_during_admission",mortality_vs_survival_recipe)
p11 = extract_roc(mortality_vs_survival_res,"death_during_admission",".pred_FALSE")
p11
ggsave("mortality_vs_survival_ROC.pdf",p11, height = 3, width = 3)
p12 = mortality_vs_survival_res$confusion_matrix
p12
p13 = mortality_vs_survival_res$model_summary_plot
p13
ggsave("mortality_vs_survival_estimate.pdf",p13, height = 3.5, width = 6)
p13 = mortality_vs_survival_res$model_summary_plot
p13
ggsave("mortality_vs_survival_estimate.pdf",p13, height = 3.5, width = 6)
model_data <- clinical_metadata %>%
filter(condition != "healthy") %>%
# antimicrobial testing was not perfomred for this patient
filter(sample_id != "S18") %>%
#getting rid of uninformative columns. Either very little variance, or too many levels to be useful
select(-pathogen,-patient_id,-pathogen_source,-infection_status,
-bacteremia_recurrence,-race,-death_at_one_year,
-peripheral_vascular_disease,-dementia,-hemiplegia,
-highly_active_antiretroviral_therapy,
-source) %>%
mutate(transplant_type = case_when(transplant_type == "none" ~ "none",
TRUE ~ "transplant")) %>%
select_if(~ !any(is.na(.))) %>%
select(-antibiotic_therapy_before_48_hrs,-antibiotic_therapy_after_48_hrs) %>%
mutate(across(c(history_of_myocardial_infarction,
congestive_heart_failure,
history_of_stroke_or_transient_ischemic_attack,
smoking, copd, peptic_ulcer_disaese,
mod_to_severe_chromic_kidney_disease,
hodgkin_disease, leukemia_or_lymphoma,
icu_admission, mechanical_ventilation,
polymicrobial_bacteremia,
thrombocytopenia_plt_50, hypotension,sensitive_to_vancomycin,
death_during_admission),
as.factor)) %>%
mutate(wbc = as.numeric(wbc))
mort_m_model_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
#update_role(condition, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
mort_metadata_res = our_model(model_data,"death_during_admission",
mort_m_model_recipe)
p14 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p14
ggsave("mortality_vs_survival_md_roc_1.pdf",p14,height = 3, width = 3)
p15 = mort_metadata_res$model_summary_plot
p15
ggsave("mortality_vs_survival_md_estimate_1.pdf",p15, height = 3.5, width = 5.5)
mort_m_model_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(icu_admission, new_role = "id") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
mort_metadata_res = our_model(model_data,"death_during_admission",
mort_m_model_recipe)
p16 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p16
ggsave("mortality_vs_survival_md_roc_2.pdf",p16, height = 3, width = 3)
p15 = mort_metadata_res$model_summary_plot
p15
ggsave("mortality_vs_survival_md_estimate_2.pdf",p15, height = 3.5, width = 5.5)
mort_m_model_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(icu_admission, new_role = "id") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
mort_metadata_res = our_model(model_data,"death_during_admission",
mort_m_model_recipe)
p16 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p16
ggsave("mortality_vs_survival_md_roc_2.pdf",p16, height = 3, width = 3)
p15 = mort_metadata_res$model_summary_plot
p15
ggsave("mortality_vs_survival_md_estimate_2.pdf",p15, height = 3.5, width = 5.5)
p16 = extract_roc(mort_metadata_res,"death_during_admission",".pred_TRUE")
p16
p16 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p16
mort_m_model_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(icu_admission, new_role = "id") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
mort_metadata_res = our_model(model_data,"death_during_admission",
mort_m_model_recipe)
p16 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p16
ggsave("mortality_vs_survival_md_roc_2.pdf",p16, height = 3, width = 3)
p15 = mort_metadata_res$model_summary_plot
p15
ggsave("mortality_vs_survival_md_estimate_1.pdf",p15, height = 3.5, width = 5.5)
model_data <- clinical_metadata %>%
filter(condition != "healthy") %>%
# antimicrobial testing was not perfomred for this patient
filter(sample_id != "S18") %>%
#getting rid of uninformative columns. Either very little variance, or too many levels to be useful
select(-pathogen,-patient_id,-pathogen_source,-infection_status,
-bacteremia_recurrence,-race,-death_at_one_year,
-peripheral_vascular_disease,-dementia,-hemiplegia,
-highly_active_antiretroviral_therapy,
-source) %>%
mutate(transplant_type = case_when(transplant_type == "none" ~ "none",
TRUE ~ "transplant")) %>%
select_if(~ !any(is.na(.))) %>%
select(-antibiotic_therapy_before_48_hrs,-antibiotic_therapy_after_48_hrs) %>%
mutate(across(c(history_of_myocardial_infarction,
congestive_heart_failure,
history_of_stroke_or_transient_ischemic_attack,
smoking, copd, peptic_ulcer_disaese,
mod_to_severe_chromic_kidney_disease,
hodgkin_disease, leukemia_or_lymphoma,
icu_admission, mechanical_ventilation,
polymicrobial_bacteremia,
thrombocytopenia_plt_50, hypotension,sensitive_to_vancomycin,
death_during_admission),
as.factor)) %>%
mutate(wbc = as.numeric(wbc))
mort_m_model_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
#update_role(condition, new_role = "outcome") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
mort_metadata_res = our_model(model_data,"death_during_admission",
mort_m_model_recipe)
p14 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p14
ggsave("mortality_vs_survival_md_roc_1.pdf",p14,height = 3, width = 3)
p15 = mort_metadata_res$model_summary_plot
p15
ggsave("mortality_vs_survival_md_estimate_1.pdf",p15, height = 3.5, width = 5.5)
mort_m_model_recipe <- recipe(death_during_admission ~ ., data = model_data) %>%
update_role(sample_id, new_role = "id") %>%
update_role(death_during_admission, new_role = "outcome") %>%  # id role tells the model not to actually incorporate it as a feature
update_role(icu_admission, new_role = "id") %>% # specify target
step_dummy(all_nominal_predictors()) %>% # convert string to dummy variables
step_impute_knn(wbc) %>%
step_normalize(all_numeric_predictors()) # normalize numeric features
mort_metadata_res = our_model(model_data,"death_during_admission",
mort_m_model_recipe)
p16 = extract_roc(mort_metadata_res,"death_during_admission",".pred_FALSE")
p16
ggsave("mortality_vs_survival_md_roc_2.pdf",p16, height = 3, width = 3)
p15 = mort_metadata_res$model_summary_plot
p15
ggsave("mortality_vs_survival_md_estimate_2.pdf",p15, height = 3.5, width = 5.5)
#| label: defining functions
# Defining the model Max built as a function, so we can easily apply it to all
# of our comparisons.
our_model = function(model_data,
outcome,
model_recipe){
# Setting seed at 42 to make reproducible.
set.seed(2)
# Create train/test split
train_test_split <- initial_split(model_data,prop = 0.8,
strata = outcome)
train_data <- training(train_test_split)
test_data <- testing(train_test_split)
# Setting a logistic regression.
log_reg <- logistic_reg(
mixture = 1, # Lasso regression
penalty = tune() # testing a few different penalty values
) %>%
set_engine("glmnet")
# Creating a model workflow
model_workflow <- workflow() %>%
add_recipe(model_recipe) %>%
add_model(log_reg)
# 5 fold cross validation
cv_folds <- vfold_cv(train_data, v = 5)
# Tune the penalty parameter
tune_res <- tune_grid(
model_workflow,
resamples = cv_folds,
grid = 5,     # Try 5 values of the penalty
metrics = metric_set(roc_auc, accuracy), # generate performance metrics for roc_auc & accuracy
control = control_grid(save_pred = TRUE)
)
# Show performance metrics and get the best model
best_result <- tune_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
slice_max(mean, n = 1) %>%
head(1)
# Finalize the workflow using the model workflow and our best performing model
final_workflow <- finalize_workflow(model_workflow, best_result)
# Fit the Final Model on the Training Data
fit_workflow <- fit(final_workflow, train_data)
# Coefficients for features that seem to matter to the model, the rest have been set to 0 via lasso regression
model_summary <- tidy(fit_workflow)
model_summary_out = model_summary %>%
filter(estimate != 0)
# Make predictions on the test data
predictions <- predict(fit_workflow, test_data, type = "prob") %>%
bind_cols(predict(fit_workflow, test_data)) %>%
bind_cols(test_data)
# Generate confusion matrix
pred <- predictions %>% select(outcome) %>% pull() %>% as.factor()
res <- predictions %>% select(.pred_class) %>% pull() %>% as.factor()
confusion_matrix <- confusionMatrix(pred, res)
confusion_matrix_out <- confusion_matrix$table
# Plotting coefficients (Lasso-selected features)
p1 <- model_summary_out %>%
ggplot(aes(reorder(term, estimate), estimate)) +
geom_point() +
coord_flip()+
xlab("term")
# Return relevant outputs
out <- list(
model_summary = model_summary_out,
test_results = predictions,
model_summary_plot = p1,
confusion_matrix = confusion_matrix_out
)
return(out)
}
# Extracting the ROC curves from the output of our_model()
extract_roc = function(list,outcome,prediction_col){
# Convert the outcome variable to a factor
predictions <- list$test_results %>%
mutate(!!outcome := as.factor(!!sym(outcome)))
# Generate ROC curve data
roc_data <- roc_curve(predictions, !!sym(outcome), !!sym(prediction_col))
roc_auc <- roc_auc(predictions, !!sym(outcome), !!sym(prediction_col))
# Plot ROC curve
p1 <- autoplot(roc_data) +
ggtitle(paste0("AUC = ", round(roc_auc$.estimate, 2)))
return(p1)
}
model_data <- clinical_metadata %>%
filter(condition != "healthy") %>%
# antimicrobial testing was not perfomred for this patient
filter(sample_id != "S18") %>%
#getting rid of uninformative columns. Either very little variance, or too many levels to be useful
select(-pathogen,-patient_id,-pathogen_source,-infection_status,
-bacteremia_recurrence,-race,-death_at_one_year,
-peripheral_vascular_disease,-dementia,-hemiplegia,
-highly_active_antiretroviral_therapy,
-source)
View(model_data)
View(model_data)
table(clinical_metadata$death_during_admission)
18 + 58
